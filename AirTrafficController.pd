//*******************************************************
//* File:    C:/Users/User/Desktop/Third Year Project/CollisionAvoidanceSystem/AirTrafficController.pd
//* Author:  Varuna
//* Created: 14:39:29 on Sunday January 25th 2015 UTC
//*******************************************************

class AirTrafficController ^=
abstract
	
	const defaultTimeToFlyFor ^= 1.00; //seconds
	
	var aircrafts : seq of Aircraft;
	var minX : real; //m
	var maxX : real; //m
	var minY : real; //m
	var maxY : real; //m
	//var conflicts : map of (AircraftPair -> ConflictStatus);
	
	invariant forall a::aircrafts :- a#aircrafts = 1;
	invariant forall a::aircrafts :- minX <= a.position.x <= maxX & minY <= a.position.y <= maxY;
	//invariant forall i::0..<#aircrafts :-(forall j::(i+1)..<#aircrafts :- aircrafts[i] ~= aircrafts[j]);
	
interface
	
	function numberOfAirCrafts : nat
		^= #aircrafts;
	
	function getPairs : set of AircraftPair
		^= (let s ^= (for i::0..<#aircrafts yield (for j::(i+1)..<#aircrafts yield AircraftPair{aircrafts[i], aircrafts[j]}).ran).ran;
			flatten(s));
		//!assert #result = ((#aircrafts)*(#aircrafts-1)/2); 
		
	function conflicts : map of (AircraftPair -> ConflictStatus)
		^= (let pairs ^= getPairs;
			map of (AircraftPair -> ConflictStatus){(for p::pairs yield pair of (AircraftPair, ConflictStatus){p, p.getConflictStatus})})
		assert forall a::result.pairs :- a.x.craft1 in aircrafts & a.x.craft2 in aircrafts & a.y = a.x.getConflictStatus;
		//!!assert #result = ((#aircrafts)*(#aircrafts-1)/2);

	function printConflicts : string
		^= "Number of aircrafts in system: " ++ numberOfAirCrafts.toString ++ "\n" ++ getConflictsString(conflicts.pairs);
		
	function getConflictsString(cons : set of pair of(AircraftPair, ConflictStatus)) : string
		decrease #cons
		^= ([#cons = 0] : "",
			[] : (let c ^= any k::cons :- k=k;
				  "Pair \n" ++ c.x.toString ++ "\n Status: " ++ c.y.toString ++ "\n" ++ getConflictsString(cons.remove(c))));
	
	function willAllAircraftsBeInBoundaryAfterFlying : bool
		^= forall a::aircrafts :- willAircraftBeInBoundryAfterFlying(a);
	
	function willAircraftBeInBoundryAfterFlying(aircraft : Aircraft) : bool
		^= (let endPosition ^= aircraft.positionAfterFlying(defaultTimeToFlyFor);
			((minX <= endPosition.x <= maxX) & (minY <= endPosition.y <= maxY)));
	
	schema !dropIfLeavesBoundaryAfterFlying
		//pre ~willAllAircraftsBeInBoundaryAfterFlying
		post aircrafts != (those a::aircrafts :- willAircraftBeInBoundryAfterFlying(a))
		assert forall a::aircrafts' :- minX <= a.position.x <= maxX & minY <= a.position.y <= maxY;
	
	schema !fly
		post self!dropIfLeavesBoundaryAfterFlying then
			 aircrafts != (for craft::aircrafts yield craft.getCraftAfterFlying(defaultTimeToFlyFor));
	
	build{!aircrafts : seq of Aircraft, !minX : real, ! maxX : real, !minY : real, !maxY : real}
		pre minX < maxX & minY < maxY 
			//& (forall i::0..<#aircrafts :-(forall j::(i+1)..<#aircrafts :- aircrafts[i] ~= aircrafts[j]))
			& (forall a::aircrafts :- a#aircrafts = 1)
			& (forall a::aircrafts :- minX <= a.position.x <= maxX & minY <= a.position.y <= maxY);
	
end;
