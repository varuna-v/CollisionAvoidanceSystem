//*******************************************************
//* File:    C:/Users/User/Desktop/Third Year Project/CollisionAvoidanceSystem/Aircraft.pd
//* Author:  Varuna
//* Created: 11:49:59 on Thursday January 8th 2015 UTC
//*******************************************************

class Aircraft ^=
abstract

	//Time added to hypothetical time to get maximum time before potential conflict is declared
	const safteyTime ^= 0.50; //seconds
	const verticalBreakPoint ^= 8800.00; //meters
	const flytimeForHypotheticalCollisionAnalysis ^= 0.01; //seconds
	
	var position : Vector;
	var velocity : Vector; // km or m per sec
	var boundaryRadius : real; // km or m as above
	var status : AircraftStatus;
	var identification : string;
	var conflictStatus : ConflictStatus;
	
	invariant position.type = VectorType Position;
	invariant velocity.type = VectorType Velocity;
	invariant ~identification.empty;
	
interface	

	function conflictStatus;
	
	function position;
	
	function velocity;
	
	function boundaryRadius;
	
	function identification;
	
	function speed : real
		^= velocity.magnitude;
		
	function getConflictStatus(other : Aircraft) : ConflictStatus
		^= ([~breaksMinimumVerticalSeparation(other)] : ConflictStatus NoConflict,
			[isInConflictWith(other)] : ConflictStatus Conflicted,
			[other.velocity ~= velocity & potentialFutureConflict(other)] : ConflictStatus PotentialFutureConflict,
			[] : ConflictStatus NoConflict);
		 //assert result = other.getConflictStatus(self);
	
	function breaksMinimumVerticalSeparation(other : Aircraft) : bool
		^= (let heightDifference ^= ([other.position.y > position.y] : other.position.y - position.y,
									[] : position.y - other.position.y);
			([position.y <= verticalBreakPoint & other.position.y <= verticalBreakPoint] : heightDifference < 300.00, //meters
			[] : heightDifference < 600.00)); //meters
	
	function isInConflictWith(other : Aircraft) : bool
		^= (let biggerRadius ^= ([boundaryRadius > other.boundaryRadius] : boundaryRadius,
								  [] : other.boundaryRadius);
			position.getTwoDimensionalDistanceFrom(other.position) <= biggerRadius);
		
	function timeToCollision(other : Aircraft) : real
		pre ~isInConflictWith(other) & other.velocity ~= velocity
		^= (let velocityDifference ^= other.velocity - velocity;
			((position - other.position).dotProduct(velocityDifference)/(velocityDifference.magnitude)^2));
		//!!assert result >= 0.00;

	function potentialFutureConflict(other : Aircraft) : bool
		pre ~isInConflictWith(other) & other.velocity ~= velocity
		^= ((timeToCollision(other) + safteyTime) <= timeToHypotheticalCollisionWith(other));
		
	//Minimum time to collision if the only info is that the aircrafts are not in conflict
	function timeToHypotheticalCollisionWith(other : Aircraft) : real
		pre ~isInConflictWith(other)
		^= ([isFlyingTowards(other)] :(let biggerRadius ^= ([boundaryRadius > other.boundaryRadius] : boundaryRadius,
															[] : other.boundaryRadius);
									   biggerRadius/(velocity-other.velocity).magnitude),
			[] : 0.00);
	
	function isFlyingTowards(other : Aircraft) : bool
		^= positionAfterFlying(flytimeForHypotheticalCollisionAnalysis).getTwoDimensionalDistanceFrom(other.positionAfterFlying(flytimeForHypotheticalCollisionAnalysis)) >= position.getTwoDimensionalDistanceFrom(other.position);
	
	function positionAfterFlying(time : real) : Vector
		^= position.plus((velocity * time), VectorType Position);
	
	function getCraftAfterFlying(time : real) : Aircraft
		^= Aircraft {positionAfterFlying(time), velocity, boundaryRadius, status, identification};
	
	redefine function toString : string
		^= "\t Position: " ++ position.toString ++ "<br>\t Velocity: " ++ velocity.toString ++ "<br>\t Conflict Status: " ++ conflictStatus.toString;
	
	//operator =(other : Aircraft) : bool
	//	^= identification = other.identification;
	
	function getCraftWithConflictStatus(cs : ConflictStatus) : Aircraft
		^= Aircraft{position, velocity, boundaryRadius, status, identification, cs};
	
	build{!position : Vector, !velocity : Vector, ! boundaryRadius : real, !status : AircraftStatus, !identification : string}
		pre  position.type = VectorType Position & velocity.type = VectorType Velocity & ~identification.empty
		post conflictStatus != ConflictStatus NoConflict;
		
	build{!position : Vector, !velocity : Vector, ! boundaryRadius : real, !status : AircraftStatus, !identification : string, !conflictStatus : ConflictStatus}
		pre  position.type = VectorType Position & velocity.type = VectorType Velocity & ~identification.empty;
	
end;

